牛顿法开方

原理：
https://www.guokr.com/question/461510/
求√a，即求x² - a = 0 的正根。
           k          k
更一般地，求 √a ，即求 x   - a = 0的正根。

注意牛顿迭代法只能逼近解，不能计算精确解。
不过实际应用中，我们都不要求绝对精确的解，
例如计算器得出结果也不需要给出无限位，
只需要给出十几位小数就足够了，
所以牛顿迭代法被广泛用在各种科学计算中。

【牛顿迭代法】

假设方程f(X) = 0  在  X0附近有一个根，那么用以下迭代式子：
             f(Xn)
 Xn+1 = Xn - ——————
             f'(Xn)
依次计算、X1、X2、X3……，那么序列将无限逼近方程的根。

牛顿迭代法的原理很简单，其实是根据f(x)在x0附近的值和斜率，估计f(x)和x轴的交点，看下面的动态图：
...
用牛顿法开方

f(x) = x² - a

f'(x) = 2x

牛顿迭代式
            X²n-a    1       a
Xn+1 = Xn - —————— = ——（Xn+ —— ）
            2Xn      2       Xn

----------------------------------------
Python 中表示出来
输入一个数值 求平方根

a = float(raw_input("输入x:求x平方根  "))
x=1 #初始值x=1
while abs(x**2-a)>1e-5: #精确条件
    x2= (x+a/x)  /2 #迭代公式
    x = x2

print x

次数大概三次即可求出

------------------------------------
牛顿法 开多次跟

a = float(raw_input("输入x:求x平方根  "))
k = int(raw_input("开几次方"))
x = 1 #初始值x=1
while abs(x**k-a)>1e-5: #精确条件
    x2 =  x -(x**k-a)/(k*x**(k-1)) #迭代公式
    x  = x2

print x
